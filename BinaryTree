import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
class Node{
	Node leftChild;
	Node rightChild;
	int key;
	String name;
	int ca1;
	int ca2;
	int ca3;
	int total;
	Node(int key,String name,int ca1,int ca2,int ca3)
	{
		this.key=key;
		this.name=name;
		this.ca1=ca1;
		this.ca2=ca2;
		this.ca3=ca3;
		total=ca1+ca2+ca3;
	}
	public String toString()
	{
		return key+" || "+name+" || "+ca1+" || "+ca2+" || "+ca3+" || "+total;
		
	}
}
public class BinaryTree {
static Node root;
static class FastReader 
{ 
    BufferedReader br; 
    StringTokenizer st; 

    public FastReader() 
    { 
        br = new BufferedReader(new
                 InputStreamReader(System.in)); 
    } 

    String next() 
    { 
        while (st == null || !st.hasMoreElements()) 
        { 
            try
            { 
                st = new StringTokenizer(br.readLine()); 
            } 
            catch (IOException  e) 
            { 
                e.printStackTrace(); 
            } 
        } 
        return st.nextToken(); 
    } 

    int nextInt() 
    { 
        return Integer.parseInt(next()); 
    } 

    long nextLong() 
    { 
        return Long.parseLong(next()); 
    } 

    double nextDouble() 
    { 
        return Double.parseDouble(next()); 
    } 

    String nextLine() 
    { 
        String str = ""; 
        try
        { 
            str = br.readLine(); 
        } 
        catch (IOException e) 
        { 
            e.printStackTrace(); 
        } 
        return str; 
    } 
} 
public static void add(int key,String name,int ca1,int ca2,int ca3)
{
	Node newNode=new Node(key,name,ca1,ca2,ca3);
	int total=ca1+ca2+ca3;
	if(root==null)
		root=newNode;
	else {
		Node focusNode=root;
		Node parent;
		while(true)
		{
			parent=focusNode;
			if(total<=focusNode.total) {
				focusNode=focusNode.leftChild;
				if(focusNode==null)
				{
					parent.leftChild=newNode;
					return;
				}
			}
			
			else {
				focusNode=focusNode.rightChild;
				if(focusNode==null)
				{
					parent.rightChild=newNode;
					return;
				}
			}
			
			
		}
	}
}


public static void main(String args[])
{
	FastReader sc=new FastReader();
	System.out.println("Enter the number of students :-- ");
	int n=sc.nextInt();
	int roll=0,ca1=-1,ca2=-1,ca3=-1;
	String name;
	while(n-->0)
	{
		try {
		System.out.println("Enter the roll number :-- ");
		
		roll=sc.nextInt();
		if(roll<=0||roll>1000)
			throw new PehliFursatMaiNikal("Roll number out of range");
		}
		catch(PehliFursatMaiNikal e)
		{
			System.out.println("Invalid :-- "+e.getMessage());
		}
		System.out.println("Enter the Name :-- ");
		name=sc.nextLine();
		System.out.println("Enter the CA1 marks :-- ");
		ca1=sc.nextInt();
		System.out.println("Enter the CA2 marks :-- ");
		ca2=sc.nextInt();
		System.out.println("Enter the CA3 marks :-- ");
		ca3=sc.nextInt();
		
		add(roll,name,ca1,ca2,ca3);
		
		
	}
	System.out.println("------------------------------------------------------------------------------------");
	inorderTraversal(root);
	
	System.out.println("------------------------------------------------------------------------------------");
	
	System.out.println("Preorder traversal");
	System.out.println("------------------------------------------------------------------------------------");
	preorderTraversal(root);
	
	System.out.println("------------------------------------------------------------------------------------");
	
	System.out.println("Postorder traversal");
	System.out.println("------------------------------------------------------------------------------------");
	postorderTraversal(root);
	
	System.out.println("------------------------------------------------------------------------------------");
	
}
private static void inorderTraversal(Node focusNode)
{
	if(focusNode!=null)
	{
		inorderTraversal(focusNode.leftChild);
		System.out.println(focusNode);
		inorderTraversal(focusNode.rightChild);
	}
}
private static void preorderTraversal(Node focusNode) {
	// TODO Auto-generated method stub
	if(focusNode!=null)
	{
		System.out.println(focusNode);
		preorderTraversal(focusNode.leftChild);
		preorderTraversal(focusNode.rightChild);
		
	}
	
}
private static void postorderTraversal(Node focusNode) {
	// TODO Auto-generated method stub
	if(focusNode!=null)
	{
		postorderTraversal(focusNode.leftChild);
		postorderTraversal(focusNode.rightChild);
		System.out.println(focusNode);
	
		
	}
	
}
}

class PehliFursatMaiNikal extends Exception
{
	public PehliFursatMaiNikal(String s)
	{
		super();
	}
}
