Orientation of 3 ordered points

My Java Code:--
/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class FastReader {

    byte[] buf = new byte[2048];
    int index, total;
    InputStream in;

    FastReader(InputStream is) {
        in = is;
    }

    int scan() throws IOException {
        if (index >= total) {
            index = 0;
            total = in.read(buf);
            if (total <= 0) {
                return -1;
            }
        }
        return buf[index++];
    }

    String next() throws IOException {
        int c;
        for (c = scan(); c <= 32; c = scan()) ;
        StringBuilder sb = new StringBuilder();
        for (; c > 32; c = scan()) {
            sb.append((char) c);
        }
        return sb.toString();
    }

    String nextLine() throws IOException {
        int c;
        for (c = scan(); c <= 32; c = scan()) ;
        StringBuilder sb = new StringBuilder();
        for (; c != 10 && c != 13; c = scan()) {
            sb.append((char) c);
        }
        return sb.toString();
    }

    char nextChar() throws IOException {
        int c;
        for (c = scan(); c <= 32; c = scan()) ;
        return (char) c;
    }

    int nextInt() throws IOException {
        int c, val = 0;
        for (c = scan(); c <= 32; c = scan()) ;
        boolean neg = c == '-';
        if (c == '-' || c == '+') {
            c = scan();
        }
        for (; c >= '0' && c <= '9'; c = scan()) {
            val = (val << 3) + (val << 1) + (c & 15);
        }
        return neg ? -val : val;
    }

    long nextLong() throws IOException {
        int c;
        long val = 0;
        for (c = scan(); c <= 32; c = scan()) ;
        boolean neg = c == '-';
        if (c == '-' || c == '+') {
            c = scan();
        }
        for (; c >= '0' && c <= '9'; c = scan()) {
            val = (val << 3) + (val << 1) + (c & 15);
        }
        return neg ? -val : val;
    }
   


    long[] getLongArray(int size) throws Exception {
        long[] ar = new long[size];
        for (int i = 0; i < size; ++i) ar[i] = nextLong();
        return ar;
    }

   int[] getIntArray(int size) throws Exception {
        int[] ar = new int[size];
        for (int i = 0; i < size; ++i) ar[i] = nextInt();
        return ar;
    }

    String[] getStringArray(int size) throws Exception {
        String[] ar = new String[size];
        for (int i = 0; i < size; ++i) ar[i] = next();
        return ar;
    }
}
class Codechef
{
    static PrintWriter pw=new PrintWriter(System.out);
    static void orientation(Point p1,Point p2,Point p3)
    {
        int s=(p2.y - p1.y) * (p3.x - p2.x)-(p2.x - p1.x) * (p3.y - p2.y); 
        pw.println("Slope of (p1,p2)-(p2,p3) = "+s); pw.flush();
        if(s==0)
            {
                pw.println("Collinear");
                pw.flush();
            }
        else if(s>0)
        {
            pw.println("Clockwise");pw.flush();
        }
        else
        {
            pw.println("Counter-Clockwise");pw.flush();
        }
    }
    
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		 FastReader sc=new FastReader(System.in);
	     int t=sc.nextInt();
	     while(t-->0)
	     {
	           int n=sc.nextInt();
	           for(int i=0;i<n;i++)
	           {
	               Point p1=new Point(sc.nextInt(),sc.nextInt());
	               Point p2=new Point(sc.nextInt(),sc.nextInt());
	               Point p3=new Point(sc.nextInt(),sc.nextInt());
	               System.out.println("Point p1 = ("+p1.x+","+p1.y+")");
	               System.out.println("Point p2 = ("+p2.x+","+p2.y+")");
	               System.out.println("Point p3 = ("+p3.x+","+p3.y+")");
	               orientation(p1,p2,p3);
	           }
	     }
	     pw.flush();
	}
}
class Point{
    int x,y;
    Point(int x,int y)
    {
        this.x=x;
        this.y=y;
    }
    
}
