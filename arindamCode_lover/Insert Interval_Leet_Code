//InsertElement Day 13 LeetCode
/*
Problem statement:- Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
*/
import java.util.*;
public class InsertInterval{
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int a[][]=new int[n][2];

		for(int i=0;i<n;i++)
		{
			a[i][0]=sc.nextInt();
			a[i][1]=sc.nextInt();
		}
		int newInterval[]=new int[2];
		newInterval[0]=sc.nextInt();
		newInterval[1]=sc.nextInt();
		long start = System.currentTimeMillis();
		int ans[][]=insert(a,newInterval);
		long end=System.currentTimeMillis();
		System.out.println("Time taken:-- "+(end-start));
		for(int i=0;i<ans.length;i++)
		{
			System.out.println("["+ans[i][0]+" "+ans[i][1]+"]");
		}

		
	}
	  public int[][] insert(int[][] intervals, int[] newInterval) {
        int n=intervals.length;
        
        
        int b[][]=new int[n+1][2];
        if(n==0&&newInterval.length==0)
            return intervals;
        else
        {
            if(n>0&&(newInterval.length==0||newInterval==null)){
                return intervals;
            }
            else if(n==0&&newInterval.length>0){
                int a[][]=new int[1][2];
                a[0]=newInterval;
                return a;
            }
            else if(n>0&&newInterval.length>0)
            {
                int f=0;
               for(int i=0;i<=n;i++)
                {
                    if(f==0&&i<=n-1&&intervals[i][0]>=newInterval[0]){
                        b[i]=newInterval;f=1;}
                    else if(f==1&&i<=n)
                        b[i]=intervals[i-1];
                    else if(i<=n-1)
                        b[i]=intervals[i];
                }
                if(newInterval[0]>intervals[n-1][0])
                	b[n]=newInterval;

                
                ArrayList<int[]> res=new ArrayList<>();
        
                int current_interval[]=b[0];
                res.add(current_interval);
                for(int[] interval:b)
                {
                    int current_begin=current_interval[0];
                    int current_end=current_interval[1];
            
                    int next_begin=interval[0];
                    int next_end=interval[1];
            
                    if(current_end>=next_begin)
                        current_interval[1]=Math.max(current_end,next_end);
                    else{
                         current_interval=interval;
                        res.add(current_interval);
                        }
                }
                return res.toArray(new int[res.size()][]);
            }
            
           
        }

        /*
        for(int i=0;i<n;i++)
            System.out.println(intervals[i][0]+" "+intervals[i][1]);*/
        return intervals;
        }
}
        /*
        Optimized Approach,O(1)(though considering the resultant array)
        public int[][] insert(int[][] intervals, int[] newInterval) {
        
        List<int[]> result = new ArrayList<>();
        
        //see if there is a intersection between the intervals by taking the start and end times
        for(int[] interval : intervals) {
            
            int start= Math.max(interval[0], newInterval[0]);
            int end = Math.min(interval[1], newInterval[1]);
            
            // check overlap
			//if start is lessthan or equal to end then we can say there is overlap
            if(start<=end) {
                newInterval[0]=Math.min(interval[0], newInterval[0]);
                newInterval[1]=Math.max(interval[1], newInterval[1]);
            }else{
                
                if(interval[0]<=newInterval[0]) result.add(interval);
                else {
                    result.add(newInterval);
                    newInterval=interval;
                }     
            }
            
            
        }
        
        result.add(newInterval);
	
            
            return result.toArray(new int[result.size()][2]);
            
    }
}*/
            
