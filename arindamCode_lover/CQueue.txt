#include <stdio.h>
#include <stdlib.h>
 struct node
{
    int data;
    struct node *link;
};
 
struct node *head = NULL, *x, *y, *z;
struct node *rear=NULL;
struct node *create();
void ins_at_end();
void del_at_beg();
void traverse();
 
int main()
{
    int ch;
 
    printf("\n 1.Enqueue\n 2.Dequeue");
    printf("\n3.traverse ");
    printf("\n0.Exit\n");
    do
    {
        printf("\n Enter your choice:");
        scanf("%d", &ch);
        switch(ch)
        {

            case 1:
            	ins_at_end();
            	break;
            	case 2:
            		del_at_beg();
            		break;
            		case 3:
            			traverse();
            			break;
            			default:
            				printf("\nWRONG CHOICE");
            			}
            		}while(ch!=0);
            		return 0;
            	}
            
            			
            	
 
struct node *create(struct node *head)
{
    int c;
 
    x = (struct node*)malloc(sizeof(struct node));
    printf("\n Enter the data:");
    scanf("%d", &x->data);
    x->link = x;
    head = x;
    return head;
}
void ins_at_end()
{
    struct node *ptr;
    struct node *temp = create(head);
    if (head == NULL)
    {
       head =rear= temp; 
    }
   
    printf("Rear element is :- %d",temp->data);
    rear->link = temp;
    rear = temp;
}
void del_at_beg()
{
    if (head == NULL){
	
        printf("\n List is empty");
        return;
        
    }
	if(head==head->link){
		printf("Deleted element is :--   %d ",head->data);
        head = NULL;
    }
    else
    {
        y = head;
        head = y->link;
        rear->link = head;
        printf("Deleted element is :--   %d ",y->data);
        free(y);

        
    }
}
void traverse()
{
    if (head == NULL) 
        printf("\n List is empty");
    else
    {
        x = head;
        while (x !=  rear)
        { 
            printf("%d->", x->data);
            x = x->link;
        }
        printf("%d", x->data);
    }
}