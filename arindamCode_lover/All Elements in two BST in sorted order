Problem Statement:- Given two binary search trees root1 and root2.

Return a list containing all the integers from both trees sorted in ascending order.


Example 1:
Input: root1 = [2,1,4], root2 = [1,0,3]
Output: [0,1,1,2,3,4]
Example 2:

Input: root1 = [0,-10,10], root2 = [5,1,7,0,2]
Output: [-10,0,0,1,2,5,7,10]
Example 3:

Input: root1 = [], root2 = [5,1,7,0,2]
Output: [0,1,2,5,7]
Example 4:

Input: root1 = [0,-10,10], root2 = []
Output: [-10,0,10]
Example 5:


Input: root1 = [1,null,8], root2 = [8,1]
Output: [1,1,8,8]
 

Constraints:

Each tree has at most 5000 nodes.
Each node's value is between [-10^5, 10^5].




Solution:-- 

- If the 1st BST is empty, the 2nd BST is not.
- If the 1st BST is non-empty. the 2nd BST is empty.

- None of them are empty

class Solution {
    List<Integer> ob=new ArrayList<>();
    public void preorder(TreeNode root)
    {
        if(root==null)
            return;
        else{
            ob.add(root.val);
            preorder(root.left);
            preorder(root.right);
        }
    }
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        if(root1==null&&root2==null)
            return ob;
        else if(root1==null&&root2!=null)
        {
             preorder(root2);
        }
        else if(root1!=null&&root2==null)
        {
             preorder(root1);
        }
        else{
            preorder(root1);
            preorder(root2);
            
        }
             
       Collections.sort(ob);
        return ob;
    }
}
