  Problem Statement:- 
  A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

 

Example 1:

Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
 

Note:

S will have length in range [1, 500].
S will consist of lowercase English letters ('a' to 'z') only.


Code:-- 

class Solution {
    public List<Integer> partitionLabels(String S) {
        int l[]=new int[26];
        for(int i=0;i<S.length();i++)
        {
            l[S.charAt(i)-'a']=i;
        }
        
        List<Integer> ob=new ArrayList<>();
        int j=-1,k=0;
        for(int i=0;i<S.length();i++)
        {
            j=Math.max(j,l[S.charAt(i)-'a']);
            if(j==i){
                ob.add(j-k+1);
                k=i+1;
            }
        }
        return ob;
    }
}
